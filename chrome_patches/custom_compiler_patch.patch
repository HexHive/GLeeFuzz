diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 219a2be0e1..178905b65f 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -348,7 +348,9 @@ config("compiler") {
     }
 
     if (use_lld) {
-      ldflags += [ "-fuse-ld=lld" ]
+      if (custom_toolchain == "" ) {
+        ldflags += [ "-fuse-ld=lld" ]
+      }
       if (lld_path != "") {
         ldflags += [ "-B$lld_path" ]
       }
@@ -501,7 +503,9 @@ config("compiler") {
   # Clang-specific compiler flags setup.
   # ------------------------------------
   if (is_clang) {
-    cflags += [ "-fcolor-diagnostics" ]
+    if (custom_toolchain == "") {
+       cflags += [ "-fcolor-diagnostics" ]
+    }
 
     # Enable -fmerge-all-constants. This used to be the default in clang
     # for over a decade. It makes clang non-conforming, but is fairly safe
@@ -521,7 +525,9 @@ config("compiler") {
       # the driver.
       ldflags += [ "--color-diagnostics" ]
     } else {
-      ldflags += [ "-Wl,--color-diagnostics" ]
+      if (custom_toolchain == "") {
+        ldflags += [ "-Wl,--color-diagnostics" ]
+      }
     }
   }
 
@@ -755,7 +761,9 @@ config("compiler") {
     } else if (!is_apple) {
       # TODO(thakis): Once LLD's Mach-O port basically works, implement call
       # graph profile sorting for it, add an opt-out flag, and pass it here.
-      ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
+      if (custom_toolchain == "") {
+        ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
+      }
     }
   }
 
@@ -1264,7 +1272,9 @@ config("compiler_deterministic") {
     } else {
       # -ffile-compilation-dir is an alias for both -fdebug-compilation-dir=
       # and -fcoverage-compilation-dir=.
-      cflags += [ "-ffile-compilation-dir=." ]
+      if (custom_toolchain == "") {
+        cflags += [ "-ffile-compilation-dir=." ]
+      }
     }
     if (!is_win) {
       # We don't use clang -cc1as on Windows (yet? https://crbug.com/762167)
@@ -2447,11 +2457,13 @@ config("symbols") {
         # sections (llvm.org/PR34820).
         cflags += [ "-ggnu-pubnames" ]
       }
-      ldflags += [ "-Wl,--gdb-index" ]
+      if (custom_toolchain == "") {
+        ldflags += [ "-Wl,--gdb-index" ]
+      }
     }
   }
 
-  if (is_clang && !is_nacl && !use_xcode_clang) {
+  if (is_clang && !is_nacl && !use_xcode_clang && custom_toolchain == "") {
     if (is_apple) {
       # TODO(https://crbug.com/1050118): Investigate missing debug info on mac.
       # Make sure we don't use constructor homing on mac.
diff --git a/build/toolchain/gcc_toolchain.gni b/build/toolchain/gcc_toolchain.gni
index 8b2fe90d00..b71709316c 100644
--- a/build/toolchain/gcc_toolchain.gni
+++ b/build/toolchain/gcc_toolchain.gni
@@ -760,3 +760,37 @@ template("clang_toolchain") {
     }
   }
 }
+
+
+template("wllvm_toolchain") {
+  if (defined(invoker.toolprefix)) {
+    toolprefix = invoker.toolprefix
+  } else {
+    toolprefix = ""
+  }
+
+  gcc_toolchain(target_name) {
+    prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+    cc = "wllvm"
+    cxx = "wllvm++"
+    ld = cxx
+    readelf = "${toolprefix}readelf"
+    ar = "${prefix}/llvm-ar"
+    nm = "${toolprefix}nm"
+
+    forward_variables_from(invoker,
+                           [
+                             "strip",
+                             "default_shlib_subdir",
+                             "enable_linker_map",
+                             "use_unstripped_as_runtime_outputs",
+                           ])
+
+    toolchain_args = {
+      if (defined(invoker.toolchain_args)) {
+        forward_variables_from(invoker.toolchain_args, "*")
+      }
+      is_clang = true
+    }
+  }
+}
diff --git a/build/toolchain/linux/BUILD.gn b/build/toolchain/linux/BUILD.gn
index 6e11d5e8c5..a61e19cd33 100644
--- a/build/toolchain/linux/BUILD.gn
+++ b/build/toolchain/linux/BUILD.gn
@@ -138,6 +138,17 @@ clang_toolchain("clang_x64") {
   }
 }
 
+wllvm_toolchain("wllvm_x64") {
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "linux"
+  }
+}
+
+
 clang_toolchain("clang_x64_v8_arm64") {
   toolchain_args = {
     current_cpu = "x64"
