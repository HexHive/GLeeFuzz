diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
index d646d5cf2469f..8ed4d29acfb31 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -1495,8 +1495,11 @@ void WebGLRenderingContextBase::FinalizeFrame(bool /*printing*/) {
 
 void WebGLRenderingContextBase::OnErrorMessage(const char* message,
                                                int32_t id) {
-  if (synthesized_errors_to_console_)
+  if (synthesized_errors_to_console_) {
+    this->runtimeMessage_ = String(message);
     PrintGLErrorToConsole(message);
+  }
+
   NotifyWebGLErrorOrWarning(message);
 }
 
@@ -3987,6 +3990,13 @@ String WebGLRenderingContextBase::getShaderSource(WebGLShader* shader) {
   return EnsureNotNull(shader->Source());
 }
 
+String WebGLRenderingContextBase::getRuntimeMessage() {
+  String ret =  EnsureNotNull(this->runtimeMessage_);
+  this->runtimeMessage_ = "";
+
+  return ret;
+}
+
 absl::optional<Vector<String>>
 WebGLRenderingContextBase::getSupportedExtensions() {
   if (isContextLost())
@@ -8657,9 +8667,12 @@ void WebGLRenderingContextBase::SynthesizeGLError(
     const char* description,
     ConsoleDisplayPreference display) {
   String error_type = GetErrorString(error);
+  String message = String("WebGL: ") + error_type + ": " +
+    String(function_name) + ": " + String(description);
+
+  this->runtimeMessage_ = message;
+  
   if (synthesized_errors_to_console_ && display == kDisplayInConsole) {
-    String message = String("WebGL: ") + error_type + ": " +
-                     String(function_name) + ": " + String(description);
     PrintGLErrorToConsole(message);
   }
   if (!isContextLost()) {
@@ -8677,6 +8690,7 @@ void WebGLRenderingContextBase::EmitGLWarning(const char* function_name,
   if (synthesized_errors_to_console_) {
     String message =
         String("WebGL: ") + String(function_name) + ": " + String(description);
+    this->runtimeMessage_ = message;
     PrintGLErrorToConsole(message);
   }
   NotifyWebGLWarning();
diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
index 20fecc269f259..504ece3a90eb3 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
@@ -334,6 +334,7 @@ class MODULES_EXPORT WebGLRenderingContextBase : public CanvasRenderingContext,
   WebGLShaderPrecisionFormat* getShaderPrecisionFormat(GLenum shader_type,
                                                        GLenum precision_type);
   String getShaderSource(WebGLShader*);
+  String getRuntimeMessage();
   absl::optional<Vector<String>> getSupportedExtensions();
   virtual ScriptValue getTexParameter(ScriptState*,
                                       GLenum target,
@@ -682,6 +683,8 @@ class MODULES_EXPORT WebGLRenderingContextBase : public CanvasRenderingContext,
   static constexpr size_t kMaximumSupportedArrayBufferSize =
       ::partition_alloc::internal::MaxDirectMapped();
 
+  String runtimeMessage_;
+
  protected:
   // WebGL object types.
   friend class WebGLContextObject;
diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.idl b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.idl
index 44c7efd2106ef..2a5a22394ef10 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.idl
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.idl
@@ -566,6 +566,7 @@ interface mixin WebGLRenderingContextBase {
     [HighEntropy, MeasureAs=WebGLRenderingContextGetShaderPrecisionFormat] WebGLShaderPrecisionFormat getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);
 
     DOMString?   getShaderSource(WebGLShader shader);
+    DOMString?   getRuntimeMessage();
 
     [HighEntropy=Direct, Measure] sequence<DOMString>? getSupportedExtensions();
 
